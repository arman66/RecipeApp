{"ast":null,"code":"import axios from 'axios';\nimport { RECIPE_RANDOM_FAIL, RECIPE_RANDOM_SUCCESS, RECIPE_RANDOM_REQUEST, RECIPE_SEARCH_SUCCESS, RECIPE_SEARCH_FAIL, RECIPE_SEARCH_REQUEST } from '../constants/recipeConstants';\nconst APIKEY = '37fab99e028f4939966406cf0b08ff4d';\nexport const recipeApiRandom = () => async dispatch => {\n  //thunk allow to make asyncronous request fucntion after a function\n  try {\n    dispatch({\n      type: RECIPE_RANDOM_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`https://api.spoonacular.com/recipes/random?number=1&apiKey=${APIKEY}`);\n    dispatch({\n      type: RECIPE_RANDOM_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: RECIPE_RANDOM_FAIL,\n      paylod: error.response\n    });\n  }\n};\nexport const recipeApiSearch = (keyword = '') => async dispatch => {\n  console.log(\"search fucntion fired off\");\n\n  try {\n    dispatch({\n      type: RECIPE_SEARCH_REQUEST\n    });\n    const keyword = req.query.keyword;\n    const {\n      data\n    } = await axios.get(`https://api.spoonacular.com/recipes/complexSearch?query=${keyword}&number=1&apiKey=${APIKEY}`);\n    dispatch({\n      type: RECIPE_SEARCH_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: RECIPE_SEARCH_FAIL,\n      paylod: error.response\n    });\n  }\n};","map":{"version":3,"sources":["/Users/armin/Documents/Projects/RecipeApp/frontend/src/actions/recipeActions.js"],"names":["axios","RECIPE_RANDOM_FAIL","RECIPE_RANDOM_SUCCESS","RECIPE_RANDOM_REQUEST","RECIPE_SEARCH_SUCCESS","RECIPE_SEARCH_FAIL","RECIPE_SEARCH_REQUEST","APIKEY","recipeApiRandom","dispatch","type","data","get","payload","error","paylod","response","recipeApiSearch","keyword","console","log","req","query"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,kBAAR,EAA4BC,qBAA5B,EAAkDC,qBAAlD,EAAyEC,qBAAzE,EAA+FC,kBAA/F,EAAkHC,qBAAlH,QAA8I,8BAA9I;AAEA,MAAMC,MAAM,GAAE,kCAAd;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAmB;AACpD;AAEA,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEP;AAAP,KAAD,CAAR;AAGA,UAAM;AAACQ,MAAAA;AAAD,QAAS,MAAMX,KAAK,CAACY,GAAN,CAAW,8DAA6DL,MAAO,EAA/E,CAArB;AAIAE,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAER,qBADD;AAELW,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAIH,GAZD,CAYE,OAAOG,KAAP,EAAc;AACZL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAET,kBAAP;AACTc,MAAAA,MAAM,EAAED,KAAK,CAACE;AADL,KAAD,CAAR;AAEH;AACJ,CAnBM;AAqBP,OAAO,MAAMC,eAAe,GAAC,CAACC,OAAO,GAAC,EAAT,KAAc,MAAOT,QAAP,IAAkB;AAE7DU,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;;AAEA,MAAI;AACIX,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEJ;AAAP,KAAD,CAAR;AAEA,UAAMY,OAAO,GAAGG,GAAG,CAACC,KAAJ,CAAUJ,OAA1B;AAEA,UAAM;AAACP,MAAAA;AAAD,QAAS,MAAMX,KAAK,CAACY,GAAN,CAAW,2DAA0DM,OAAQ,oBAAmBX,MAAO,EAAvG,CAArB;AAIAE,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEN,qBADD;AAELS,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAIH,GAbL,CAaM,OAAOG,KAAP,EAAc;AACZL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEL,kBAAP;AACTU,MAAAA,MAAM,EAAED,KAAK,CAACE;AADL,KAAD,CAAR;AAEH;AACJ,CArBM","sourcesContent":["import axios from 'axios'\nimport {RECIPE_RANDOM_FAIL, RECIPE_RANDOM_SUCCESS,RECIPE_RANDOM_REQUEST, RECIPE_SEARCH_SUCCESS,RECIPE_SEARCH_FAIL,RECIPE_SEARCH_REQUEST} from '../constants/recipeConstants'\n\nconst APIKEY= '37fab99e028f4939966406cf0b08ff4d'\n\nexport const recipeApiRandom = () => async (dispatch) =>{\n    //thunk allow to make asyncronous request fucntion after a function\n\n    try {\n        dispatch({type: RECIPE_RANDOM_REQUEST})\n\n        \n        const {data} = await axios.get(`https://api.spoonacular.com/recipes/random?number=1&apiKey=${APIKEY}`)\n\n        \n\n        dispatch({\n            type: RECIPE_RANDOM_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({type: RECIPE_RANDOM_FAIL,\n        paylod: error.response})\n    }\n}\n\nexport const recipeApiSearch=(keyword='')=>async (dispatch)=>{\n\nconsole.log(\"search fucntion fired off\")\n\ntry {\n        dispatch({type: RECIPE_SEARCH_REQUEST})\n\n        const keyword = req.query.keyword\n\n        const {data} = await axios.get(`https://api.spoonacular.com/recipes/complexSearch?query=${keyword}&number=1&apiKey=${APIKEY}`)\n\n        \n\n        dispatch({\n            type: RECIPE_SEARCH_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({type: RECIPE_SEARCH_FAIL,\n        paylod: error.response})\n    }\n}"]},"metadata":{},"sourceType":"module"}